'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/Coders-Haven/contributor/','title':"Contributor",'section':"Introduction",'content':"Contributors #   Thanks #  It is due to these people that this website has the content that it has\n Contributors #  Maanuj Voraapps/github-actionsactions-user  "});index.add({'id':1,'href':'/Coders-Haven/docs/java/datatypes/','title':"Datatypes",'section':"Introduction",'content':"Datatypes #   We will be exploring different datatypes\n  Integer - int Double - double Boolean - boolean String - String   Integer #   Any whole number  Double #   Any number with a decimal  Boolean #   True or False  String #   Any letters, numbers, and characters Quotation marks are needed around the value   Integer #  Integers are usually defined as so,\nint x = 12; This is showing that the value of zero is being assigned to the integer variable called x.\nints can only store integers.\n Double #  Doubles are usually defined as so,\ndouble y = 2.1; This is showing that the value of 2.1 is being assigned to the double called y.\ndoubles can store both integers, and numbers with decimals, but it will convert an integer to a double\n Booleans #  Booleans are usually defined as so,\nboolean z = true; Booleans can only equal to true or false.\n Strings #  Strings are basically words that can be stored as a variable. To define one, you would write,\nString a = \u0026#34;You would need to use quotes to write a string\u0026#34;; Strings can contain words and numbers.\n Extra #  You can print out a variable too.\nSystem.out.println(x); This statement would print out the value of x, which is 0\nSystem.out.println(y); If you replaced the x with y, it would now print out the value 2.1\nSystem.out.println(z); If you then replaced the y with z, it would then print out the value true\nSystem.out.println(a); And finally, if you were to replace the z with a, then it would print out, \u0026quot;You would need to use quotes to write a string\u0026quot; , since that is the sentence defined in the string a\n"});index.add({'id':2,'href':'/Coders-Haven/docs/java/helloworld/','title':"Hello World",'section':"Introduction",'content':"Hello World #   We will be printing out the sentence \u0026lsquo;Hello World\u0026rsquo;\n public class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello World\u0026#34;); } }  Parts #   public class HelloWorld {  We defined a public class named HelloWorld . We will get to classes later   public static void main(String[] args) {  We wrote out, public static void main(String[] args), which is a declaration in which we will later go into in detail   System.out.println(\u0026quot;Hello World\u0026quot;);  Is a common way to print out phrases. To print out phrases, they need to be in quotes   { }  The curly brackets, { }, are used to define what is in a function.   ;  After each line of code that is not declaring a class or a main, we usually put a semi-colon(;) after it    "});index.add({'id':3,'href':'/Coders-Haven/docs/java/publicvprivatevprotected/','title':"Public Vprivate Vprotected",'section':"Introduction",'content':"Public Versus Private Versus Protected #   Public #  The public keyword essentially means that this method or class can be access by anyone who has access to the file, and other files in the project would be able to access these methods\nPrivate #  The private keyword essentially means that this method can only be access within this file itself\nProtected #  The protected keyword essentially means that different files can access the methods/functions/code inside the protected object, but it cannot change and values inside of it\n"});index.add({'id':4,'href':'/Coders-Haven/docs/java/strings/','title':"Strings",'section':"Introduction",'content':"Strings #   In Java, Strings have many different functions which can be applied to them.\n indexOf() #  With the indexOf() function, you can check for the first occurrence of a String inside of another String\nString longStr = \u0026#34;Hi, my name is Kai, and I like Pi\u0026#34;; int indexStr = longStr.indexOf(\u0026#34;Kai\u0026#34;); System.out.println(indexStr); This would print out the following to the console\n15 This returns the index of which the first character of the String Kai is located at, which is 15\nWe can see this with the following table\n   Index Number Character     0 H   1 i   2 ,   3     4 m   5 y   6     7 n   8 a   9 m   10 e   11     12 i   13 s   14     15 K    Here we can see that at the 15th index, it contains the character K from the String Kai , and it returns the integer 15 , the index\n subString() #  With the subString() function, you can get a smaller String out of a larger String\nString longStr = \u0026#34;Hi, my name is Kai, and I like Pi\u0026#34;; String subStr = longStr.substring(0,5); System.out.println(subStr); This would print out the following to the console\nHi, m Basically what it is doing here is that it takes the input (startIndex, endIndex-1) , as we have seen, we inputted the startIndex as 0 and the endIndex as 5 , but it will only go up till 4\n   Index Number Character     0 H   1 i   2 ,   3     4 m    The table above shows our indexes within the String\nAnother example is shown here\nString longStr = \u0026#34;Hi, my name is Kai, and I like Pi\u0026#34;; String subStr = longStr.substring(2); System.out.println(subStr); This would print out the following to the console\n, my name is Kai, and I like Pi Wait, but didn\u0026rsquo;t you just say that the subString() function took in two values? Why are you inputting in one value now?\nWell, we can also do it with one value, it will go from that index, to the end of the String and return that subString-ed String\n   Index Number Character     0 H   1 i     Adding Strings #  Did you know that you can add two Strings together to make one whole String?\nString basic = \u0026#34;H\u0026#34;; basic = basic + \u0026#34;i\u0026#34;; System.out.println(basic); This would print out the following to the console\nHi What we did, is we took the original String, \u0026quot;H\u0026quot; , and we took another String, \u0026quot;i\u0026quot; , and added them both together, to make \u0026quot;Hi\u0026quot; We can also do this in a slightly different way\nString basic = \u0026#34;H\u0026#34;; basic += \u0026#34;i\u0026#34;; System.out.println(basic); This would print out the following to the console\nHi The only thing that changed was the operator of adding. The += basically takes whatever was there and adds to it\nOne more thing, you can also add a String and an Integer together\nString basic = \u0026#34;H\u0026#34;; basic += 1; System.out.println(basic); This would print out the following to the console\nH1 This converts the int, 1 to a String, \u0026quot;1\u0026quot; , and adds it to the String, to make a string \u0026quot;H\u0026quot;\n"});index.add({'id':5,'href':'/Coders-Haven/docs/python/casting/','title':"Casting",'section':"Introduction",'content':"Casting #   Casting is used to switch one type of datatype into another through certain functions\nWhats the point? #  It is neccessary to know this since inputs are recieved in the form of strings, and if you wanted a numerical input from the user you would not be able to without the use of casting\n Functions for Casting #   int() #  The int() function will cast anything inside the parenthesis into an integer, only if it is possible to\nThis will round down any decimal values inputted\nint(\u0026#34;5\u0026#34;) \u0026gt; 5 int(\u0026#34;10\u0026#34;) \u0026gt; 10 int(\u0026#34;10.4\u0026#34;) \u0026gt; Error int(10.1) \u0026gt; 10 int(10.44) \u0026gt; 10 int(\u0026#34;Hi\u0026#34;) \u0026gt; Error int(True) \u0026gt; 1 int(False) \u0026gt; 0  str() #  The str() function will convert anything between the parenthesis into a String object if possible(which the answer is it usually is)\nstr(5) \u0026gt; \u0026#34;5\u0026#34; str(6.11) \u0026gt; \u0026#34;6.11\u0026#34; str(True) \u0026gt; \u0026#34;True\u0026#34; str(\u0026#34;String\u0026#34;) \u0026gt; \u0026#34;String\u0026#34;  float() #  The float() function will convert anything between the parenthesis into a float, only if it is possible to do\nfloat(5) \u0026gt; 5.0 float(5.1111) \u0026gt; 5.1111 float(\u0026#34;5.1241\u0026#34;) \u0026gt; 5.1241 float(True) \u0026gt; 1.0 float(False) \u0026gt; 0.0  bool() #  Will return a True of False value of anything inputted into the parenthesis\nEssentially, it will return True for anything inside if it is not a 0 nor empty\nbool(10) \u0026gt; True bool(1000.001212144) \u0026gt; True bool(0) \u0026gt; False "});index.add({'id':6,'href':'/Coders-Haven/docs/python/datatypes/','title':"Datatypes",'section':"Introduction",'content':"Datatypes #   We will be exploring different datatypes\n  Integer String Float Boolean   Integer #   Any whole number  Examples #  5  10  102310   String #   Any letters, numbers, and characters Quotation marks are needed around the value  It can be either single or double quotes    Examples #  'Hi'  \u0026quot;I like to move it\u0026quot;  'P0k3m0n'   Float #   Any number with a decimal  Examples #  23.325  34.1124  3.14   Boolean #   True or False  Examples #  True   False    type() #  type() By adding any object within the parenthesis, it will return the type of it\n Lets try it for an integer\nprint(type(5)) Will print out\n\u0026lt;type \u0026#39;int\u0026#39;\u0026gt; It returns that value 5 has a type of int , which means integer\n Lets try it for a string\nprint(type(\u0026#39;hi\u0026#39;)) Will print out\n\u0026lt;type \u0026#39;str\u0026#39;\u0026gt; It returns that value 'hi' has a type of str , which means string\n Lets try it for a float\nprint(type(5.2102)) Will print out\n\u0026lt;type \u0026#39;float\u0026#39;\u0026gt; It returns that value 5.2102' has a type of float .\n Lets try it for a boolean\nprint(type(True)) Will print out\n\u0026lt;type \u0026#39;bool\u0026#39;\u0026gt; It returns that value True has a type of bool , which means boolean\n"});index.add({'id':7,'href':'/Coders-Haven/docs/python/helloworld/','title':"Hello World",'section':"Introduction",'content':"Hello World #   We will be printing out the sentence \u0026lsquo;Hello World\u0026rsquo;\n print(\u0026#34;Hello World\u0026#34;)  Parts #   print()  It prints out words or variables between the parenthesis   \u0026quot;Hello World\u0026quot;  A string with the value of Hello World is made    "});index.add({'id':8,'href':'/Coders-Haven/docs/python/ifstatements/','title':"If Statements",'section':"Introduction",'content':"If Statements #   If Statements are composed of some parts\n if(condition): code elif(condition): code else: code  Breaking it down #   if -\u0026gt; if  needs a condition   elif -\u0026gt; else if  needs a conditions the second condition you can have as many of these as you want   else -\u0026gt; else  does not need a condition     There are 3 Rules #    NEVER, NEVER EVER, call a If Statment an If Loop    The conditions will almost always use operators    The conditions have to be true for a block of code to execute     Examples #  x = 4 if(x \u0026lt; 5): print(\u0026#34;James is super smart\u0026#34;) elif(x == 6): print(\u0026#34;The smartest boi in the world is currently traveling\u0026#34;) else: print(\u0026#34;James is a smartie\u0026#34;) "});index.add({'id':9,'href':'/Coders-Haven/docs/python/input/','title':"Input",'section':"Introduction",'content':"Input #   The input() function will pose a prompt to the user, in which the answer to the question will be returned to the program\nRemember that all responses will be stored in a string even if they are numbers, so use casting!\n For example, if I wanted to make a greeting with the user\u0026rsquo;s name, I would need them to input their name into my code for me to use it\nname = input(\u0026#39;Hello user, what is your name?\u0026#39;) This first prints out the statement, Hello user, what is your name? to the console, and then waits for the user input. After getting the user input, it then goes off and stores it into the variable, named name\nTo print out a greeting to the user, we would do\nprint(\u0026#39;Hello\u0026#39; + name) Now, if we actually used this, it would go like this\nHello user, what is your name? Sleepy Hello Sleepy Great! But what if we wanted to make a mini-calculator and add two numbers together?\nWell, if we did it like it was defined above, we would do\nnum1 = input(\u0026#39;Please enter your first number\u0026#39;) num2 = input(\u0026#39;Please enter your second number\u0026#39;) print(num1+num2) Cool, now let us run this\nPlease enter your first number 5 Please enter your second number 10 510 Well, it looks like we are doing some basic caveman math here. Well, why did it only combine the two inputs and not actually \u0026lsquo;add\u0026rsquo; them?\nThe input() function takes in an input and keeps it is a string. Wait, a string, but don\u0026rsquo;t we want to add two numbers together? This is where casting comes in\nWe will cast the two inputs we get into integers, and then add them\nnum1 = int(input(\u0026#39;Please enter your first number\u0026#39;)) num2 = int(input(\u0026#39;Please enter your second number\u0026#39;)) print(num1+num2) Now let us run this\nPlease enter your first number 5 Please enter your second number 10 15 Nice, now it works\n"});index.add({'id':10,'href':'/Coders-Haven/docs/python/lists/','title':"Lists",'section':"Introduction",'content':"Lists #   Lists are a special type of datatype which can hold multiple values within it\nLists can hold any type of datatype within it\nLists start at an index of 0(like most things in the virtual world), instead of 1\n Things about Lists #  Declaring an List #  lst = [ ] This makes an empty list named lst\nAdding objects to an List #  lst = [ ] lst.append(\u0026#34;Cars\u0026#34;) This adds the string \u0026ldquo;Cars\u0026rdquo; to the list lst . The list now looks like this\n\u0026gt; [\u0026#34;Cars\u0026#34;] Modifying the first item in the List #  lst = [\u0026#34;Cars\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] lst[0] = \u0026#34;Doofus\u0026#34; This will take the item in the 0th index, and replace the previous value with the new value provided. The list now looks like this\n\u0026gt; [\u0026#34;Doofus\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] Find the length of an List #  lst = [\u0026#34;Cars\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] length = len(lst) This will use the len() function on the list, lst , the is passed in, and give the variable \u0026lsquo;length\u0026rsquo; the length of the list. The value of length is\n\u0026gt; 3 Popping an item from an List #  lst = [\u0026#34;Cars\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] lst.pop(1) This will use the pop() function to remove the item at index number 1. This will result in the list lst being\n\u0026gt; [\u0026#34;Cars\u0026#34;, \u0026#34;Apple\u0026#34;] Removing an item from an List #  lst = [\u0026#34;Cars\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] lst.remove(\u0026#34;Candy\u0026#34;) This will use the remove() function to remove the item with the value specified between the parenthesis. It will result in the list lst being\n\u0026gt; [\u0026#34;Cars\u0026#34;, \u0026#34;Apple\u0026#34;] Clearing an List #  lst = [\u0026#34;Cars\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] lst.clear() This will clear the list, resulting in there being an empty list. It will result in the list lst being\n\u0026gt; [ ] Finding the index of an item in an List #  lst = [\u0026#34;Cars\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] index = lst.index(\u0026#34;Apple\u0026#34;) This will find the item with the value \u0026ldquo;Apple\u0026rdquo; in the list lst and return the index of its first occurence in the list. It will then store it in the index variable. The index variable, in the end, will hold the value\n\u0026gt; 2 Sorting an List #  lst = [\u0026#34;Cars\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] lst.sort() This will sort the list lst by ascending to descending. It will result in lst being\n\u0026gt; [\u0026#34;Apple\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Cars\u0026#34;] Reversing an List #  lst = [\u0026#34;Cars\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Apple\u0026#34;] lst.reverse() This will reverse the list lst . It will result in lst being\n\u0026gt; [\u0026#34;Apple\u0026#34;, \u0026#34;Candy\u0026#34;, \u0026#34;Cars\u0026#34;] "});index.add({'id':11,'href':'/Coders-Haven/docs/python/loops/','title':"Loops",'section':"Introduction",'content':"Loops #   What are loops? Loops are used for doing a task a specific number of time, but it also has other uses which we will be exploring below and later on\n Types of Loops #  There are two types of loops that we will be introducing here\n For Loops While Loops   For Loops #  Usually, for loops are used for iterating over a sequence of objects\nHere is an example in which we see that we have a list and we use the for loop to print out items in the list one by one\nteam = [\u0026#39;Pichu\u0026#39;, \u0026#39;Pikachu\u0026#39;, \u0026#39;Raichu\u0026#39;] for pokemon in team: print(pokemon) This will result in the following being printed out to console\nPichu Pikachu Raichu What we did here was first we make a list named team which ended up including string objects. The second like essentially said, for every pokemon in list team , print the pokemon object\nSo that is why we had the names of the pokemon inside team printed out\n While Loops #  We have seen what we can use for loops for, now lets see what we can do with a while loop . In a while loop, we have to set a condition, and it will continue to run until the condition is deemed to be false\nHere is the basic syntax of the while loop\nwhile(condition is true): run code As stated before, if the condition is true, only then the code run\nIf the condition never turns false, the while loop will keep on running infinitely, which will cause your program to crash  Here is an example of a while loop which will do the same thing that we did using the for loop before\nteam = [\u0026#39;Pichu\u0026#39;, \u0026#39;Pikachu\u0026#39;, \u0026#39;Raichu\u0026#39;] index = 0 while index \u0026lt; len(team): print(team[index]) index += 1    Line Number Explanation     1 Here we are defining a list named team with the elements 'Pichu', 'Pikachu', 'Raichu (which are strings) in it   2 We are defining a counter variable, named index , for the condition which will track our location within the list. Remember that the index of a list will start at 0 and not 1   3 Here we are entering our while loop , the condition we are setting is that as long as the value of our counter variable, index , does not exceed nor equal the value of the length of the list, we will continue   4 We are now using the counter variable, index , to access the current item in the list, team , and printing it out   5 Finally, we are adding a 1 to the value of the counter variable, index , each time the while loop runs. Without this, we will be accessing the same item over and over again, and the condition will also not even turn false, resulting in a infinite loop    "});index.add({'id':12,'href':'/Coders-Haven/docs/python/methods/','title':"Methods",'section':"Introduction",'content':"Methods #   A general rule of thumb is, if you are copying and pasting a lot, then you are doing something wrong   What is a Method? #  Well, a method is simply a chunk of code, that can be called over and over again by the name it is give\nHere is an example of a method that prints out Hello World when it is called\ndef helloWorld(): print(\u0026#39;Hello World\u0026#39;) And to use this method to do our bidding, we would call the following code\nhelloWorld() Which should print out\n\u0026#39;Hello World\u0026#39;  Is that all a Method is Capable of Doing? #  No.\nWe can also pass in objects into methods for them to use, these are called inputs as they are being inputted into the method. This is handy as sometimes the values we need to use change, and by using a variable input, we can have more uses for the same method\nHere is how you would define a method that prints out a customized greeting\ndef greeting(name): print(\u0026#39;Hello \u0026#39; + name) And to use this method to do our bidding, we would call the following code\nname = \u0026#39;Sleepy\u0026#39; greeting(name) We can also call it like this way as well, and it doesn\u0026rsquo;t make a difference\ngreeting(\u0026#39;Sleepy\u0026#39;) These two ways, should print out the same thing, being\n\u0026#39;Hello Sleepy\u0026#39;  The return keyword #  What if, instead of printing something out to the console, we want the code to run calculation, but keep it for future use?\nIn this case, we would use the return keyword\nWhat it does is when the method runs, the thing you want outputted from the method is stated after the return keyword, and then the method essentially becomes that value\nHere is an example\ndef helloWorld(): return \u0026#39;Hello World\u0026#39; helloWorldStr = helloWorld() print(helloWorldStr) What this is doing is that it first defines the helloWorld() method for use later. Then it creates a variable, helloWorldStr and assigns it the value you get from running helloWorld() . After that, the method, helloWorld() returns the string 'Hello World' , which is then stored into the variable helloWorldStr . Then, the variable is printed out, and we get\n\u0026#39;Hello World\u0026#39; Even though we could have just called print('Hello World') , and have finished it in one line, the importance of this piece of code comes into play when you have to run the same piece of code multiple times\n Problem Time #  Here is a mini-problem for you to code\nYou are an employee of a start-up company, EZ Addition, which is in the works of creating a calculator which can add two numbers together and print out the sum. With your new found coding skills, your boss comes up to you and wants you to create a piece of code, which asks the user for two numbers to add, and then prints out the addition of those two numbers. He also wants you to make it simple since the company wants to reuse the code in multiple places.\nYour task: Create the piece of software that the company wants\nClick here after attempting it Here is one possible way to solve this question\ndef addition(num1, num2) print(num1 + num2) num1 = int(input(\u0026#39;Please enter in the first number\u0026#39;)) num2 = int(input(\u0026#39;Please enter in the second number\u0026#39;)) addition(num1, num2) What we did here was we first created a method, named addition , which took in two parameters, num1 and num2 , and printed out the addition of them. In the third line, we asked the user for the number, and casted it into an integer, which would let us add the numbers together. Then when we called the method with the inputs, addition(num1, num2) , it printed out the sum we wanted\n  "});index.add({'id':13,'href':'/Coders-Haven/docs/python/operators/','title':"Operators",'section':"Introduction",'content':"Operators #   Operators are used in many scenarios. Note that there are two types of operators\n Logic Operators Mathematical Operators  Logic Operators #   Used for comparisions between two or more objects  Mathematical Operators #   Used for mathematical operations   Examples of Logic Operators #   == (Checking if two things are equal) != (Checking if two things are not equal) \u0026gt; (Checking if the first object is greater than the second object) \u0026lt; (Checking if the first object is less than the second object) \u0026gt;= (Checking if the first object is greater than or equal to the first object) \u0026lt;= (Checking if the first object is less than or equal to the first object) || (If this is true or that is true, then the whole thing is true) (Only in If Statement) \u0026amp;\u0026amp; (This and that have to be true for the whole thing to be true) (Only in If Statement) and (If this is true or that is true, then the whole thing is true) or (This and that have to be true for the whole thing to be true)  Examples of Mathematical Operators #   + (Adding two items) - (Subtracting two items) \\* (Multiplying two items) / (Dividing two items) % (Modulus(Basically remainder))  "});index.add({'id':14,'href':'/Coders-Haven/docs/python/strings/','title':"Strings",'section':"Introduction",'content':"Strings #   You know that Strings are one type of datatype, but there is more to Strings than just that\n Strings are like arrays #  You can get a certain character at a specific position in a string like an array using an index.\na = \u0026#34;Hello World\u0026#34; print(a[1]) This will print out\ne since the character 'e' is at the first index of the String\nThe length of a string #  You can get the length of a string using the len() function\na = \u0026#34;Hello World\u0026#34; print(len(a)) This will return\n11 since there are 11 characters in the string\n   Index Character     1 H   2 e   3 l   4 l   5 o   6     7 W   8 o   9 r   10 l   11 d   12 e    Removing blanks in a string #  You can remove leading or trailing blanks in a string using the strip() function\na = \u0026#34; Hello World \u0026#34; print(a.strip()) This will return\nHello World Without any leading or trailing empty spaces\nLowercasing the String #  The lower() method will lowercase the characters in a string\na = \u0026#34;Hello World\u0026#34; print(a.lower()) This will return\nhello world Uppercasing the String #  The upper() method will uppercase the characters in a string\na = \u0026#34;Hello World\u0026#34; print(a.upper()) This will return\nHELLO WORLD Replacing characters in a String #  The replace() method will replace strings with a different string in a string\na = \u0026#34;Hello World\u0026#34; print(a.replace(\u0026#34;H\u0026#34;, \u0026#34;J\u0026#34;)) This will return\nJello World Splitting a String #  The split() method will split a string into an array if there is an occurence of a certain string\na = \u0026#34;Hello World\u0026#34; print(a.split(\u0026#34;l\u0026#34;)) This will return\n[\u0026#34;He\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;o Wor\u0026#34;, \u0026#34;d\u0026#34;] Checking if a string is present #  The in keyword and not in keywords can help distinguish whether a certain string is present in a string or not (resulting in a boolean)\ntxt = \u0026#34;Hello World\u0026#34; x = \u0026#34;llo\u0026#34; in txt print(x) This will return\nTrue Adding variables in a string #  You can use the format() function to easily insert variables into a string\nage = 17 name = \u0026#34;Dino\u0026#34; intro = \u0026#34;Hi, my name is {}, and I am {} years old\u0026#34; print(intro.format(name, age)) This will return\nHi, my name is Dino, and I am 17 years old Special Characters in Strings #  There are some special characters within strings\n \\n  New line   \\\\  Backslash   \\t  Tab   \\r  Carriage Return    Finding the index of a certain part #  You can find the index of a certain string within the string\na = \u0026#34;Hello World\u0026#34; print(a.index(\u0026#34;l\u0026#34;)) This will return\n2 It returned the index of the first occurence of the string within the original string\n"});index.add({'id':15,'href':'/Coders-Haven/docs/python/variables/','title':"Variables",'section':"Introduction",'content':"Variables #   Any item/name that is referencing/stores another item in storage\n Variables can have any name #  For example\n x Dino Is_A Smart1e   Instanitating a Variable #  For example\nx = 5 Dino = \u0026#34;Ok\u0026#34; Is_A = 0.01 Smart1e = True  Printing Variables #  Place the variable name in the parenthesis of the print() function\nprint(x) print(Dino) print(Is_A) print(Smart1e) Would print out\n5 \u0026#39;Ok\u0026#39; 0.01 True "});index.add({'id':16,'href':'/Coders-Haven/docs/java/','title':"Introduction",'section':"Docs",'content':"Welcome to Java #   Here you will learn more about the basic fundamentals of Java itself\n "});index.add({'id':17,'href':'/Coders-Haven/docs/python/','title':"Introduction",'section':"Docs",'content':"Welcome to Python #   What is Python? #  Python is a programming language that was first released in 1991, and was developed by Guido van Rossum.\n "});})();