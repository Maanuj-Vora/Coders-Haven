'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/Coders-Haven/contributors/','title':"Contributors",'section':"Introduction",'content':"Contributors #   Here are the people who have worked on this resource to help you\n "});index.add({'id':1,'href':'/Coders-Haven/python/casting/','title':"Casting",'section':"Introduction",'content':"Casting #   Casting is used to switch one type of datatype into another through certain functions\nWhy is it needed? #  It is neccessary to know this since inputs are recieved in the form of strings, and if you wanted a numerical input from the user you would not be able to without the use of casting\n Functions for Casting #   int() #  The int() function will cast anything inside the parenthesis into an integer, only if it is possible to\nThis will round down any decimal values inputted\nExamples\n int(\u0026ldquo;5\u0026rdquo;)\n 5\n int(\u0026ldquo;10\u0026rdquo;)\n 10\n int(\u0026ldquo;10.4\u0026rdquo;)\n Error\n int(10.1)\n 10\n int(10.44)\n 10\n int(\u0026ldquo;Hi\u0026rdquo;)\n Error\n int(True)\n 1\n int(False)\n 0\n   str() #  The str() function will convert anything between the parenthesis into a String object if possible(which the answer is it usually is)\nExamples\n str(5)\n \u0026ldquo;5\u0026rdquo;\n str(6.11)\n \u0026ldquo;6.11\u0026rdquo;\n str(True)\n \u0026ldquo;True\u0026rdquo;\n str(\u0026ldquo;String\u0026rdquo;)\n \u0026ldquo;String\u0026rdquo;\n   float() #  The float() function will convert anything between the parenthesis into a float, only if it is possible to do\nExamples\n float(5)\n 5.0\n float(5.1111)\n 5.1111\n float(\u0026ldquo;5.1241\u0026rdquo;)\n 5.1241\n float(True)\n 1.0\n float(False)\n 0.0\n   bool() #  Will return a True of False value of anything inputted into the parenthesis\nEssentially, it will return True for anything inside if it is not a 0 nor empty\nExamples\n bool(10)\n True\n bool(1000.001212144)\n True\n bool(0)\n False\n  "});index.add({'id':2,'href':'/Coders-Haven/python/datatypes/','title':"Datatypes",'section':"Introduction",'content':"Datatypes #   We will be exploring different datatypes\n  Integer String Float Boolean   Integer #   Any whole number  String #   Any letters, numbers, and characters Quotation marks are needed around the value  Float #   Any number with a decimal  Boolean #   True or False   The type() Function #  type()\n By adding any varible inside the parenthesis, it will return the type of it  "});index.add({'id':3,'href':'/Coders-Haven/python/helloworld/','title':"Hello World",'section':"Introduction",'content':"Hello World #   We will be printing out the sentence \u0026lsquo;Hello World\u0026rsquo;\n  print(\u0026ldquo;Hello World\u0026rdquo;)\n  Parts #   print()  It prints out words or variables between the parenthesis   \u0026ldquo;Hello World\u0026rdquo;  A string with the value of Hello World is made    "});index.add({'id':4,'href':'/Coders-Haven/python/ifstatements/','title':"If Statements",'section':"Introduction",'content':"If Statements #   If Statements are composed of some parts\n  if(condition):\n code\n elif(condition):\n code\n else:\n code\n   Breaking it down #   if -\u0026gt; if  needs a condition   elif -\u0026gt; else if  needs a conditions the second condition you can have as many of these as you want   else -\u0026gt; else  does not need a condition     There are 3 Rules #   NEVER, NEVER EVER, call a If Statment an If Loop The conditions will almost always use operators The conditions have to be true for a block of code to execute   Examples #   x = 4\nif(x \u0026lt; 5):\n print(\u0026ldquo;James is super smart\u0026rdquo;)\n elif(x == 6):\n print(\u0026ldquo;The smartest boi in the world is currently traveling\u0026rdquo;)\n else:\n print(\u0026ldquo;James is a smartie\u0026rdquo;)\n  "});index.add({'id':5,'href':'/Coders-Haven/python/input/','title':"Input",'section':"Introduction",'content':"Input #   The input() function will pose a prompt to the user, in which the answer to the question will be returned to the program\nRemember that all responses will be stored in a string even if they are numbers, so use casting!\nExample\n input(\u0026ldquo;What is your name?\u0026quot;)\n \u0026ldquo;Maanuj\u0026rdquo;\n   input(\u0026ldquo;What is your age?\u0026quot;)\n \u0026ldquo;17\u0026rdquo;\n   input(\u0026ldquo;Are you alive?\u0026quot;)\n \u0026ldquo;False\u0026rdquo;\n  "});index.add({'id':6,'href':'/Coders-Haven/python/lists/','title':"Lists",'section':"Introduction",'content':"Lists #   Lists are a special type of datatype which can hold multiple values within it\nLists can hold any type of datatype within it\nLists start at an index of 0(like most things in the virtual world), instead of 1\n Things about Lists #  Declaring an List #   arr = [ ]\n This makes an empty list named \u0026lsquo;arr\u0026rsquo;\nAdding stuff to an List #   arr = [ ]\narr.append(\u0026ldquo;Cars\u0026rdquo;)\n This adds the string \u0026ldquo;Cars\u0026rdquo; to the list \u0026lsquo;arr\u0026rsquo;. The list now looks like this\n [\u0026ldquo;Cars\u0026rdquo;]\n Modifying the first item in the List #   arr = [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\narr[0] = \u0026ldquo;Doofus\u0026rdquo;\n This will take the item in the 0th index, and replace the previous value with the new value provided. The list now looks like this\n [\u0026ldquo;Doofus\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\n Find the length of an List #   arr = [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\nlength = len(arr)\n This will use the len() function on the list, \u0026lsquo;arr\u0026rsquo;, the is passed in, and give the variable \u0026lsquo;length\u0026rsquo; the length of the list. The value of length is\n 3\n Popping an item from an List #   arr = [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\narr.pop(1)\n This will use the pop() function to remove the item at index number 1. This will result in the list \u0026lsquo;arr\u0026rsquo; being\n [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\n Removing an item from an List #   arr = [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\narr.remove(\u0026ldquo;Candy\u0026rdquo;)\n This will use the remove() function to remove the item with the value specified between the parenthesis. It will result in the list \u0026lsquo;arr\u0026rsquo; being\n [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\n Clearing an List #   arr = [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\narr.clear()\n This will clear the list, resulting in there being an empty list. It will result in the list \u0026lsquo;arr\u0026rsquo; being\n [ ]\n Finding the index of an item in an List #   arr = [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\nindex = arr.index(\u0026ldquo;Apple\u0026rdquo;)\n This will find the item with the value \u0026ldquo;Apple\u0026rdquo; in the list \u0026lsquo;arr\u0026rsquo; and return the index of its first occurence in the list. It will then store it in the index variable. The index variable, in the end, will hold the value\n 2\n Sorting an List #   arr = [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\narr.sort()\n This will sort the list \u0026lsquo;arr\u0026rsquo; by ascending to descending. It will result in \u0026lsquo;arr\u0026rsquo; being\n [\u0026ldquo;Apple\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Cars\u0026rdquo;]\n Reversing an List #   arr = [\u0026ldquo;Cars\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Apple\u0026rdquo;]\narr.reverse()\n This will reverse the list \u0026lsquo;arr\u0026rsquo;. It will result in \u0026lsquo;arr\u0026rsquo; being\n [\u0026ldquo;Apple\u0026rdquo;, \u0026ldquo;Candy\u0026rdquo;, \u0026ldquo;Cars\u0026rdquo;]\n "});index.add({'id':7,'href':'/Coders-Haven/python/operators/','title':"Operators",'section':"Introduction",'content':"Operators #   Operators are used in many scenarios. Note that there are two types of operators\n Logic Operators Mathematical Operators  Logic Operators #   Used for comparisions between two or more objects  Mathematical Operators #   Used for mathematical operations   Examples of Logic Operators #   \u0026lsquo;==\u0026rsquo; (Checking if two things are equal) \u0026lsquo;!=\u0026rsquo; (Checking if two things are not equal) \u0026lsquo;\u0026gt;\u0026rsquo; (Checking if the first object is greater than the second object) \u0026lsquo;\u0026lt;\u0026rsquo; (Checking if the first object is less than the second object) \u0026lsquo;\u0026gt;=\u0026rsquo; (Checking if the first object is greater than or equal to the first object) \u0026lsquo;\u0026lt;=\u0026rsquo; (Checking if the first object is less than or equal to the first object) \u0026lsquo;||\u0026rsquo; (If this is true or that is true, then the whole thing is true) (Only in If Statement) \u0026lsquo;\u0026amp;\u0026amp;\u0026rsquo; (This and that have to be true for the whole thing to be true) (Only in If Statement) \u0026lsquo;and\u0026rsquo; (If this is true or that is true, then the whole thing is true) \u0026lsquo;or\u0026rsquo; (This and that have to be true for the whole thing to be true)  Examples of Mathematical Operators #   \u0026lsquo;+\u0026rsquo; (Adding two items) \u0026lsquo;-\u0026rsquo; (Subtracting two items) \u0026lsquo;*\u0026rsquo; (Multiplying two items) \u0026lsquo;/\u0026rsquo; (Dividing two items) \u0026lsquo;%\u0026rsquo; (Modulus(Basically remainder))  "});index.add({'id':8,'href':'/Coders-Haven/python/strings/','title':"Strings",'section':"Introduction",'content':"Strings #   You know that Strings are one type of datatype, but there is more to Strings than just that\n Strings are like arrays #  You can get a certain character at a specific position in a string like an array using an index.\n a = \u0026ldquo;Hello World\u0026rdquo;\nprint( a[1] )\n This will print out\n e\n since the character \u0026lsquo;e\u0026rsquo; is at the first index of the String\nThe length of a string #  You can get the length of a string using the len() function\n a = \u0026ldquo;Hello World\u0026rdquo;\nprint( len(a) )\n This will return\n 11\n since there are 11 characters in the string\n H e l l o  W o r l d  Removing blanks in a string #  You can remove leading or trailing blanks in a string using the strip() function\n a = \u0026quot; Hello World \u0026quot;\nprint( a.strip() )\n This will return\n Hello World\n Without any empty spaces\nLowercasing the String #  The lower() method will lowercase the characters in a string\n a = \u0026ldquo;Hello World\u0026rdquo;\nprint( a.lower() )\n This will return\n hello world\n Uppercasing the String #  The upper() method will uppercase the characters in a string\n a = \u0026ldquo;Hello World\u0026rdquo;\nprint( a.upper() )\n This will return\n HELLO WORLD\n Replacing characters in a String #  The replace() method will replace strings with a different string in a string\n a = \u0026ldquo;Hello World\u0026rdquo;\nprint( a.replace(\u0026ldquo;H\u0026rdquo;, \u0026ldquo;J\u0026rdquo;) )\n This will return\n Jello World\n Splitting a String #  The split() method will split a string into an array if there is an occurence of a certain string\n a = \u0026ldquo;Hello World\u0026rdquo;\nprint( a.split(\u0026ldquo;l\u0026rdquo;) )\n This will return\n [\u0026ldquo;He\u0026rdquo;, \u0026ldquo;\u0026rdquo;, \u0026ldquo;o Wor\u0026rdquo;, \u0026ldquo;d\u0026rdquo;]\n Checking if a string is present #  The \u0026lsquo;in\u0026rsquo; keyword and \u0026lsquo;not in\u0026rsquo; keywords can help distinguish whether a certain string is present in a string or not (resulting in a boolean)\n txt = \u0026ldquo;Hello World\u0026rdquo;\nx = \u0026ldquo;llo\u0026rdquo; in txt\nprint(x)\n This will return\n True\n Adding variables in a string #  You can use the format() function to easily insert variables into a string\n age = 12\nname = \u0026ldquo;Vivaan\u0026rdquo;\nintro = \u0026ldquo;Hi, my name is {}, and I am {} years old\u0026rdquo;\nprint(intro.format(name, age))\n This will return\n Hi, my name is Vivaan, and I am 12 years old\n Special Characters in Strings #  There are some special characters within strings\n \u0026lsquo;\\n\u0026rsquo;  New line   \u0026lsquo;\\\\\u0026rsquo;  Backslash   \u0026lsquo;\\t\u0026rsquo;  Tab   \u0026lsquo;\\r\u0026rsquo;  Carriage Return    Finding the index of a certain part #  You can find the index of a certain string within the string\n a = \u0026ldquo;Hello World\u0026rdquo;\nprint( a.index(\u0026ldquo;l\u0026rdquo;) )\n This will return\n 2\n It returned the first occurence of the string within the original string\nFor more information visit here #  "});index.add({'id':9,'href':'/Coders-Haven/python/variables/','title':"Variables",'section':"Introduction",'content':"Variables #   Any item/name that is referencing/stores another item in storage\n Variables can have any name #  For example\n x Maanuj Is_A Smart1e   Instanitating a Variable #  For example\n x = 5\nMaanuj = \u0026ldquo;Ok\u0026rdquo;\nIs_A = 0.01\nSmart1e = True\n  Printing Variables #  Place the variable name in the parenthesis of the print() function\n"});index.add({'id':10,'href':'/Coders-Haven/python/','title':"Introduction",'section':"Introduction",'content':"Welcome to Python #   Here you will learn more about the basic fundamentals of Python itself\n "});})();